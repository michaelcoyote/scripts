#!/usr/bin/env python
#
#  URL/URI syntax in markdown is the dumbest
#  crap ever and I'm even dumber for forgetting
#  every time I have to use the dumb thing.
#  This script will turn a url into markdown
#  The idea here is I'd like to turn this into
#  part of a linkdump/notetaking system

import argparse
import warnings
from BeautifulSoup import BeautifulSoup
from urllib2 import Request, urlopen, URLError


outfile = False


# construct the markdown link and send to file or screen
def linkout(title, url):
    if outfile:
        outfile.write('[{0}]({1})\n'.format(title, url))
    else:
        print '[{0}]({1})\n'.format(title, url)


# URL lookup module
def lookup(url_lu):
    req = Request(url_lu)
    try:
        url_looked = urlopen(req)
    except URLError, e:
        if not arg.quiet:
            warnings.warn('Warning: url error = '+str(e.reason))
        title_out = 'Lookup failed = '+str(e.reason)+': '+url_lu
        return title_out
#    except httplib.HTTPException, e:
#        if not arg.quiet:
#            warnings.warn('Warning: http exception = '+str(e.reason))
#        title_out = 'http exception = '+str(e.reason)+': '+url_lu
#        return title_out
#    except urllib2.HTTPError, e:
#        if not arg.quiet:
#            warnings.warn('Warning: http error = '+str(e.reason))
#        title_out = 'http err = '+str(e.reason)+': '+url_lu
#        return title_out
    except Exception as e:
        title_out = url_lu
        if not arg.quiet:
            warnings.warn('generic exception: ' + e.message)
        return title_out
    else:
        htd = BeautifulSoup(url_looked)
        title_out = htd.title.string
        return title_out


# Set up the command argument parser
# We are using the argparse library here as it has a nice built in
# help and seems to be the most forward compatable.
args = argparse.ArgumentParser()

args.add_argument('-f', action='store', default=False, dest='outfile',
                  help='output file')
args.add_argument('-l', action='store', dest='url', required=True,
                  help='URL to save as link')
args.add_argument('-n', action='store_true', default=False, dest='nolookup',
                  help='turn off URL title lookup')
args.add_argument('-t', action='store', dest='title_text',
                  help='Text to prepend to link title')
args.add_argument('-q', action='store_true', default=False, dest='quiet',
                  help='turn off warnings')
arg = args.parse_args()

# open the file in append mode if specified.
if arg.outfile:
    outfile = open(arg.outfile, "a")

# construct the Title/URL depending on lookup options
# and send to screen/file
if arg.title_text:
    title_txt = arg.title_text + ': '
else:
    title_txt = ''
if arg.nolookup:
    linkout(title_txt+arg.url+' ', arg.url)
else:
    linkout(title_txt+lookup(arg.url), arg.url)

# close the file if specificed.
if arg.outfile:
    outfile.close()
